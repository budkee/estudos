services:
  # --------------------- Django Framework Server ------------------
  api_server:
    container_name: django_api
    build:
      context: ./django
      dockerfile: Dockerfile
      # image: budkee/api_django_gunicorn:1.2
    env_file:
      - ./django/.env
    networks:
      - espaco
    ports:
      - "8000:8000"             ## Porta para aplicação Django
    volumes:
      - ./django/app:/app
      # - ./django/wait-for-it.sh:/app/wait-for-it.sh
    depends_on:
      postgresql:
        condition: service_healthy
    # command: sh -c "while :; do sleep 1; done"
    

  # --------------------- Database Server e GUI ------------------
  postgresql:
    container_name: 'db'
    image: postgres:latest
    restart: always
    ports:
      - "7777:5432"   # postgres
      - "8777:5432"   # db_data
      - "8877:5432"   # db_newsletter
    networks:
      - espaco
    env_file:
      - ./django/.env
    volumes:
      - ./db/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: 'gui_db'
    image: dpage/pgadmin4:8.8
    networks:
      - espaco
    ports:
      - "7778:80"
    env_file:
      - ./django/.env
    depends_on:
      - postgresql

  # --------------------- API Gateway ------------------
  # nginx:
  #   container_name: nginx
  #   build: ./nginx
  #   volumes:
  #     - static:/static          ## Revisar: os arquivos .css e .js do Django não estão sendo entregues ao cliente
  #   ports:
  #     - "9999:80"
  #   depends_on:
  #     - api_server

# --------------------- Rede ------------------
networks:
  espaco:
    driver: bridge      ## Cria uma ponte entre a sua rede local e a do container(espaco).

# --------------------- Volumes ------------------
volumes:
  api_server:

  